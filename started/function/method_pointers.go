package function

// 值 vs 指针   ==>    副本 vs 原始数据

// 指针接收者
// 		可以为指针接收者声明方法。
//		意味着对于某类型 T，接收者的类型可以用 *T 的文法。（此外，T 不能是像 *int 这样的指针。）

// ***********************************************************************************
// 使用指针接收者的原因有二：
// 			首先，方法能够修改其接收者指向的值。
// 			其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样做会更加高效。
// 通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。
// ***********************************************************************************

// 例如，这里为 *Vertex 定义了 Scale 方法。
// 指针接收者的方法可以修改接收者指向的值（就像 Scale 在这做的）。由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。

func (v *Vertex) ScalePointer(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

// ***************************************************************************************
// 试着移除Scale 函数声明中的 *，观察此程序的行为如何变化。
// 若使用值接收者，那么 Scale 方法会对原始 Vertex 值的副本进行操作。（对于函数的其它参数也是如此。）
// Scale 方法必须用指针接受者来更改 main 函数中声明的 Vertex 的值。
// ***************************************************************************************

func (v Vertex) ScaleValue(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

func ScalePointer1(v *Vertex, f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

func ScaleValue1(v Vertex, f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}
